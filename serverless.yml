service: serverless-demo # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-pseudo-parameters
  - serverless-sam

provider:
  name: aws
  runtime: nodejs8.10
  region: us-west-2
  # profile: voting-profile
  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:scan
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/restaurants
    - Effect: Allow
      Action: execute-api:Invoke
      Resource: arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/*/GET/restaurants
    - Effect: Allow
      Action: kinesis:PutRecord
      Resource: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events
    - Effect: Allow
      Action: sns:Publish
      Resource: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurant-notification
  # apiKeys:
  #   - myFirstKey
  #   # - ${opt:stage}-myFirstKey
  #   # - ${env:MY_API_KEY} # you can hide it in a serverless variable
  # usagePlan:
  #   quota:
  #     limit: 5000
  #     offset: 2
  #     period: MONTH
  #   throttle:
  #     burstLimit: 200
  #     rateLimit: 100

# you can add packaging information here
package:
#  include:
#    - ../../node_modules/**
 exclude:
   - DynamodbScripts/**
  #  - exclude-me-dir/**

functions:

  get-index:
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
    environment:
      restaurants_api: https://ztk1mf3sjc.execute-api.us-west-2.amazonaws.com/dev/restaurants
      orders_api: https://ztk1mf3sjc.execute-api.us-west-2.amazonaws.com/dev/orders
      cognito_user_pool_id: us-west-2_sYFtW8M2B
      cognito_client_id: 3rl1fppi7b958ahlfj9je9rk6s

  # Internal api is protected by an IAM role. The request has be signed when call this api
  get-restaurants:
    handler: functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants/
          method: get
          authorizer: aws_iam
          # private: true
    environment:
      restaurants_table: restaurants

  # This api is protected by the Cognit user pool. The token has to be included in the request's header when calls.
  search-restaurants:
    handler: functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/us-west-2_sYFtW8M2B
    environment:
      restaurants_table: restaurants
  
  place-order:
    handler: functions/place-order.handler
    events:
      - http:
          path: /orders
          method: post
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/us-west-2_sYFtW8M2B
    environment:
      order_events_stream: order-events # The event for Kinesis

  # The function is driven by the Kinesis stream
  notify-restaurant:
    handler: functions/notify-restaurant.handler
    events:
      - stream:
          arn: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events
    environment:
      order_events_stream: order-events
      restaurant_notification_topic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurant-notification

resources:
  Resources:
    restaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: restaurants
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # The resource for the Kinesis stream
    orderEventsStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: order-events
        ShardCount: 1

    restaurantNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: restaurant-notification
        TopicName: restaurant-notification
